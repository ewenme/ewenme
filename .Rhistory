}
data <- getPoliticians("Libya")
View(countries)
getPoliticians <- function(country) {
data <- fromJSON(countries[['legislatures']][[match(country, countries$name)]][["popolo_url"]])
politicians <- as.data.frame(data$persons) %>%
left_join(as.data.frame(data$memberships), by = c("id"="person_id")) %>%
legislatures <- as.data.frame(countries[['legislatures']][[match(country, countries$name)]][["legislative_periods"]]) %>%
rename(leg_name=name)
data <- left_join(politicians, legislatures, by=c("legislative_period_id"="id"))
}
data <- getPoliticians("Libya")
getPoliticians <- function(country) {
data <- fromJSON(countries[['legislatures']][[match(country, countries$name)]][["popolo_url"]])
politicians <- as.data.frame(data$persons) %>%
left_join(as.data.frame(data$memberships), by = c("id"="person_id")) %>%
legislatures <- as.data.frame(countries[['legislatures']][[match(country, countries$name)]][["legislative_periods"]]) %>%
rename(leg_name=name)
data <- left_join(politicians, legislatures, by=c("legislative_period_id"="id"))
}
data <- getPoliticians("United Kingdom")
getPoliticians <- function(country) {
data <- fromJSON(countries[['legislatures']][[match(country, countries$name)]][["popolo_url"]])
politicians <- as.data.frame(data$persons) %>%
left_join(as.data.frame(data$memberships), by = c("id"="person_id")) %>%
legislatures <- as.data.frame(countries[['legislatures']][[match(country, countries$name)]][["legislative_periods"]]) %>%
rename(name=leg_name)
data <- left_join(politicians, legislatures, by=c("legislative_period_id"="id"))
}
data <- getPoliticians("United Kingdom")
getPoliticians <- function(country) {
data <- fromJSON(countries[['legislatures']][[match(country, countries$name)]][["popolo_url"]])
politicians <- as.data.frame(data$persons) %>%
left_join(as.data.frame(data$memberships), by = c("id"="person_id")) %>%
legislatures <- as.data.frame(countries[['legislatures']][[match(country, countries$name)]][["legislative_periods"]]) %>%
rename(leg_name=name)
data <- left_join(politicians, legislatures, by=c("legislative_period_id"="id"))
return(data)
}
data <- getPoliticians("United Kingdom")
getPoliticians <- function(country) {
data <- fromJSON(countries[['legislatures']][[match(country, countries$name)]][["popolo_url"]])
politicians <- as.data.frame(data$persons) %>%
left_join(as.data.frame(data$memberships), by = c("id"="person_id")) %>%
legislatures <- as.data.frame(countries[['legislatures']][[match(country, countries$name)]][["legislative_periods"]])
legislatures <-  rename(legislatures, leg_name=name)
data <- left_join(politicians, legislatures, by=c("legislative_period_id"="id"))
return(data)
}
data <- getPoliticians("United Kingdom")
getPoliticians <- function(country) {
data <- fromJSON(countries[['legislatures']][[match(country, countries$name)]][["popolo_url"]])
politicians <- as.data.frame(data$persons) %>%
left_join(as.data.frame(data$memberships), by = c("id"="person_id")) %>%
legislatures <- as.data.frame(countries[['legislatures']][[match(country, countries$name)]][["legislative_periods"]])
legislatures <-  rename(legislatures, leg_name=name)
data <- left_join(politicians, legislatures, by=c("legislative_period_id"="id.y"))
return(data)
}
data <- getPoliticians("United Kingdom")
as.data.frame(countries[['legislatures']][[match(country, "United Kingdom")]][["legislative_periods"]]
)
as.data.frame(countries[['legislatures']][[match("United Kingdom", countries$name)]][["legislative_periods"]]
)
getPoliticians <- function(country) {
data <- fromJSON(countries[['legislatures']][[match(country, countries$name)]][["popolo_url"]])
politicians <- as.data.frame(data$persons) %>%
left_join(as.data.frame(data$memberships), by = c("id"="person_id"))
legislatures <- as.data.frame(countries[['legislatures']][[match(country, countries$name)]][["legislative_periods"]])
legislatures <-  rename(legislatures, leg_name=name)
data <- left_join(politicians, legislatures, by=c("legislative_period_id"="id"))
return(data)
}
data <- getPoliticians("United Kingdom")
View(data)
data <- getPoliticians("Libya")
View(data)
install.packages(c("backports", "plotly", "quantmod", "tibble"))
install.packages("reprex")
install.packages("tidyquant")
install.packages("flexdashboard")
install.packages("trelliscope")
devtools::install_github("ewenme/fplR")
install.packages("fivethirtyeight")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(rmarkdown)
library(knitr)
library(rmarkdown)
install.packages(c("gdata", "survey"))
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
broken = names(which(
sapply(rownames(installed.packages()), function(i) {
system2('Rscript', c('-e', shQuote(sprintf('library(%s)', i))))
}) != 0
))
if (length(broken)) install.packages(broken)
.libPaths()
library(tidyverse)
library(fplR)
library(hrbrthemes)
library(ggalt)
#get mini league players
league <- jsonlite::read_json("https://fantasy.premierleague.com/drf/leagues-classic-standings/122838?phase=1",
simplifyVector = TRUE)
# get standings only for top 10
league <- league$standings$results[1:10, ]
# create empty list to append gameweek-level data to
leagueDetailed <- list()
# loop through user ids
for (i in league$entry) {
# get detailed data for users
data <- userPerformance(user_id = i)
# append dataframe as item in list
leagueDetailed[[i]] <- data
}
leagueDetailed <- bind_rows(leagueDetailed) %>%
group_by(entry) %>%
mutate(prev_rank = lag(overall_rank, n=1), rank_chg = overall_rank - prev_rank)
ggplot(data = leagueDetailed, aes(x=event, y=mean(leagueDetailed$rank_chg, na.rm=TRUE))) +
geom_line()
ggplot(data = leagueDetailed, aes(x=event, y=mean(rank_chg, na.rm=TRUE))) +
geom_line()
ggplot(data = leagueDetailed, aes(x=event, y=mean(rank_chg, na.rm=TRUE), group=1)) +
geom_line()
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(rank_chg, na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line()
league <- jsonlite::read_json("https://fantasy.premierleague.com/drf/leagues-classic-standings/122838?phase=1",
simplifyVector = TRUE)
# get standings
league <- league$standings$results
# create empty list to append gameweek-level data to
leagueDetailed <- list()
# loop through user ids
for (i in league$entry) {
# get detailed data for users
data <- userPerformance(user_id = i)
# append dataframe as item in list
leagueDetailed[[i]] <- data
}
leagueDetailed <- bind_rows(leagueDetailed) %>%
group_by(entry) %>%
mutate(prev_rank = lag(overall_rank, n=1), rank_chg = overall_rank - prev_rank)
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(rank_chg, na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line()
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line()
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(trans="reverse")
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma() +
scale_x_continuous(breaks = seq(0, 40, 5)) +
theme_ipsum(grid="Xy", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(limits = c(0, 500000)) +
scale_x_continuous(breaks = seq(0, 40, 5)) +
theme_ipsum(grid="Xy", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(limits = c(0, 500000)) +
scale_x_continuous(breaks = seq(0, 40, 5)) +
theme_ipsum(grid="X", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(limits = c(0, 500000)) +
scale_x_continuous(breaks = seq(0, 40, 5)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
myPerformance <- userPerformance(137633)
# plot my overall rank by gameweek
ggplot(data = myPerformance, aes(x=event, y=overall_rank, group=1)) +
geom_line() +
scale_y_comma(trans="reverse", limits = c(1000000, 0)) +
scale_x_continuous(breaks = seq(0, 40, 5)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="My Overall Rank across the FPL Season",
x="Gameweek no.",
y="Overall Rank")
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(limits = c(0, 500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(limits = c(0, 500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="My Mini-League:\nMean Change in Overall Rank across the FPL Season",
x="Gameweek no.",
y="Change in Overall Rank")
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(limits = c(0, 500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="My Mini-League:\nMean Change in Overall Rank across the Season",
x="Gameweek no.",
y="Change in Overall Rank")
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE))
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
scale_y_comma(limits = c(0, 500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="My Mini-League:\nMean Change in Overall Rank across the Season",
x="Gameweek no.",
y="Change in Overall Rank")
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
geom_smooth() +
scale_y_comma(limits = c(0, 500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="My Mini-League:\nMean Change in Overall Rank across the Season",
x="Gameweek no.",
y="Change in Overall Rank")
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
geom_smooth(se=FALSE) +
scale_y_comma(limits = c(0, 500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="Mean Change in Overall Rank across the Season",
subtitle="",
x="Gameweek no.",
y="Change in Overall Rank")
# plot rank change by gameweek
leagueDetailed %>%
group_by(event) %>%
summarise(val=mean(abs(rank_chg), na.rm=TRUE)) %>%
ggplot(aes(x=event, y=val, group=1)) +
geom_line() +
geom_smooth(se=FALSE) +
scale_y_comma(limits = c(0, 500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="Mean Change in Rank across the Season",
subtitle="Sample of users taken from my mini-leage",
x="Gameweek no.",
y="Overall rank change",
caption="Source: https://fantasy.premierleague.com/a/leagues/standings/122838/classic")
View(leagueDetailed)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/100)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10) %>%
ggplot(aes(x=overall_rank, y=value)) +
geom_point()
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point()
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
scale_x_comma() +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=total, y=overall_rank)) +
geom_point() +
scale_y_comma()
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
scale_x_comma() +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
scale_x_comma(limits = c(0, 3500000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
scale_x_comma(limits = c(0, 3750000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14)
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
scale_x_comma(limits = c(0, 3750000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="Final Ranking vs. Team Value",
subtitle="Sample of users taken from my mini-leage",
x="Final rank",
y="Total team value",
caption="Source: https://fantasy.premierleague.com/a/leagues/standings/122838/classic")
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
geom_smooth(stat = "lm")
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
geom_smooth(stat = "lm") +
scale_x_comma(limits = c(0, 3750000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="Final Ranking vs. Team Value",
subtitle="Sample of users taken from my mini-leage",
x="Final rank",
y="Total team value",
caption="Source: https://fantasy.premierleague.com/a/leagues/standings/122838/classic")
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE) +
scale_x_comma(limits = c(0, 3750000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="Final Ranking vs. Team Value",
subtitle="Sample of users taken from my mini-leage",
x="Final rank",
y="Total team value",
caption="Source: https://fantasy.premierleague.com/a/leagues/standings/122838/classic")
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_comma(limits = c(0, 3750000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="Final Ranking vs. Team Value",
subtitle="Sample of users taken from my mini-leage",
x="Final rank",
y="Total team value",
caption="Source: https://fantasy.premierleague.com/a/leagues/standings/122838/classic")
leagueDetailed %>%
filter(event == 38) %>%
mutate(value=value/10, bank=bank/10, total = value+bank) %>%
ggplot(aes(x=overall_rank, y=total)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE) +
scale_x_comma(limits = c(0, 3750000)) +
theme_ipsum(grid="XY", base_size = 14, axis_title_size = 14, caption_size = 12,
plot_title_size = 18, subtitle_size = 14) +
labs(title="Final Ranking vs. Team Value",
subtitle="Sample of users taken from my mini-leage",
x="Final rank",
y="Total team value",
caption="Source: https://fantasy.premierleague.com/a/leagues/standings/122838/classic")
league <- list()
for (i in 1:51) {
# get detailed data for users
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/leagues-classic-standings/268527?phase=1&lsPage=", i),
simplifyVector = TRUE)
# append dataframe as item in list
league[[i]] <- data
}
# bind rows of loop, add lagged values
league <- bind_rows(league)
league <- list()
for (i in 1:51) {
# get detailed data for users
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/leagues-classic-standings/268527?phase=1&lsPage=", i),
simplifyVector = TRUE)
# append dataframe as item in list
league[[i]] <- data$standings$results
}
league <- bind_rows(league)
View(league)
# create empty list to append gameweek-level data to
leagueDetailed <- list()
# loop through user ids
for (i in league$entry) {
# get detailed data for users
data <- userPerformance(user_id = i)
# append dataframe as item in list
leagueDetailed[[i]] <- data
}
listings <- read_csv("listings.csv.gz")
library(tidyverse)
library(fplR)
library(hrbrthemes)
library(ggalt)
library(forcats)
library(zoo)
require(tidytext)
require(stringr)
listings <- read_csv("listings.csv.gz")
reviews <- read_csv("reviews.csv.gz")
require(sf)
install.packages("sf")
install.packages("sf")
install.packages(c("bindrcpp", "clipr", "DBI", "dplyr", "evaluate", "foreign", "geofacet", "glue", "hexSticker", "quantmod", "survey", "tidytext", "XML"))
install.packages("sf")
install.packages("sf")
devtools::install_github('edzer/sfr')
install.packages("sf")
library(tidyverse)
library(hrbrthemes)
library(ggalt)
library(forcats)
require(tidytext)
require(stringr)
require(sf)
listings_detailed <- read_csv("listings.csv.gz")
reviews_detailed <- read_csv("reviews.csv.gz")
calendar <- read_csv("calendar.csv.gz")
setwd("~/Documents/Github/ewenme")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
devtools::install_github("rstudio/sparklyr")
install.packages("dbplyr")
devtools::install_github("rstudio/sparklyr")
library(tidyverse)
library(hrbrthemes)
library(ggalt)
library(forcats)
require(tidytext)
require(stringr)
require(sf)
require(sparklyr)
listings_detailed <- copy_to(sc, "listings.csv.gz")
sc <- spark_connect(master = "local")
spark_install(version = "1.6.2")
sc <- spark_connect(master = "local")
listings_detailed <- copy_to(sc, "listings.csv.gz")
library(data.table)
